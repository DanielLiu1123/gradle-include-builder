import org.yaml.snakeyaml.LoaderOptions
import org.yaml.snakeyaml.Yaml
import org.yaml.snakeyaml.constructor.Constructor

import java.nio.file.Paths

import static java.util.Optional.of
import static java.util.Optional.ofNullable

def configNames = ['include-builder.yaml', 'include-builder.yml']

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath("org.yaml:snakeyaml:2.2")
    }
}

def log = { String message ->
    println("[Include Builder] $message (${rootProject.name})")
}

def exec = { String command ->
    println "execute: $command"
    def process = ["bash", "-c", "$command"].execute()
    process.consumeProcessOutput(System.out, System.err)
    def result = process.waitFor()
    if (result != 0) {
        throw new RuntimeException("""
                Execute failed with exit code $result
                command: $command
                """)
    }
}

def getCurrentBranch = { String dir = null ->
    "git ${dir ? "-C $dir" : ""} branch --show-current".execute().text.trim()
}

def getAbsolutePath = { String dir ->
    return dir.startsWith('/') ? dir : Paths.get("$rootDir", dir).normalize().toString()
}

def cloneProject = { String gitUrl, String dir, String branch = null ->
    def path = getAbsolutePath(dir)
    if (new File(path).exists()) {
        return
    }
    exec "git clone $gitUrl ${path}"
    if (branch) {
        exec "git -C ${path} checkout $branch"
    }
}

def getIncludeBuilderYaml  = { String absolutePath ->
    def path = absolutePath ?: "${rootDir.getAbsolutePath()}"
    return configNames
            .stream()
            .map { new File(path, it) }
            .filter { it.exists() }
            .findFirst()
            .orElse(null)
}

def yamlParser = new Yaml(new Constructor(Cfg.class, new LoaderOptions()));

def file = getIncludeBuilderYaml()

if (!file?.isFile()) {
    log("include-builder.yaml is missing or not a file, skip")
    return
}

def cfg = yamlParser.load(file.text) as Cfg
def branchMappingDir = cfg.branchMappingDir
def globalTrySameBranch = cfg.trySameBranch
def currentBranch = getCurrentBranch()
def branchConfigFile = of(new File("$branchMappingDir/${currentBranch}.yaml")).filter { it.exists() }.orElseGet { new File("$branchMappingDir/${currentBranch}.yml") }
def projectToCfg = branchConfigFile.exists() ? yamlParser.parse(branchConfigFile) : [:] as Map<String, BranchMappingCfg>

cfg.projects.each { project ->
    def dir = project.local?.dir ?: project.remote?.git?.url?.split('/')?.last()?.split('\\.')?.first()
    if (!dir) {
        log("local.dir and remote.git.url is missing, skip")
        return
    }

    def name = project.name ?: dir.split('/').last()
    def branch = projectToCfg[name]?.branch ?: project.remote?.git?.branch
    def projectDir = new File(getAbsolutePath(dir))
    def trySameBranch = ofNullable(project?.remote?.git?.trySameBranch).orElse(globalTrySameBranch)

    if (projectDir.exists()) {
        if (!projectDir.isDirectory()) {
            log("$dir is not a directory, skip")
            return
        }
        log("Include existing project: $dir")
        includeBuild(dir)
        return
    }

    def gitUrl = project.remote?.git?.url
    if (!gitUrl) {
        log("$dir is not exist, and remote.git.url is missing, skip")
        return
    }

    if (branch) {
        cloneProject(gitUrl, dir, branch)
    } else {
        if (trySameBranch) {
            try {
                cloneProject(gitUrl, dir, currentBranch)
            } catch (Exception ignored) {
                cloneProject(gitUrl, dir)
            }
        } else {
            cloneProject(gitUrl, dir)
        }
    }

    if (projectDir.exists()) {
        includeBuild(dir)
    }

}

class Cfg {
    String branchMappingDir = '.branch-mappings'
    Boolean trySameBranch = true
    List<Proj> projects = []
}

class Proj {
    String name
    Local local = new Local()
    Remote remote = new Remote()
}

class Local {
    String dir = '.'
}

class Remote {
    Git git = new Git()
}

class Git {
    String url
    String branch
    Boolean trySameBranch
}

class BranchMappingCfg {
    String branch
}
